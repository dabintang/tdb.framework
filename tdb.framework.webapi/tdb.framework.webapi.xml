<?xml version="1.0"?>
<doc>
    <assembly>
        <name>tdb.framework.webapi</name>
    </assembly>
    <members>
        <member name="T:tdb.framework.webapi.APILog.APILogActionFilterAttribute">
            <summary>
            调接口日志过滤器特性
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.APILog.APILogActionFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            进入接口
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:tdb.framework.webapi.APILog.APILogActionFilterAttribute.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)">
            <summary>
            离开接口
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:tdb.framework.webapi.APILog.APILogActionFilterAttribute.GetLogLevel(tdb.framework.webapi.APILog.APILogAttribute)">
            <summary>
            从特性获取日志级别
            </summary>
            <param name="attr">特性</param>
            <returns></returns>
        </member>
        <member name="T:tdb.framework.webapi.APILog.APILogAttribute">
            <summary>
            调用API日志
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.APILog.APILogAttribute.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="T:tdb.framework.webapi.Cache.CacheExtensions">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Cache.CacheExtensions.AddTdbRedisCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])">
            <summary>
            添加缓存服务
            </summary>
            <param name="services"></param>
            <param name="connectionStrings">连接字符串集合</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.CacheExtensions.AddTdbCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{tdb.framework.webapi.Cache.ICache})">
            <summary>
            添加缓存服务（指定服务）
            </summary>
            <param name="services"></param>
            <param name="getCache">获取缓存服务</param>
        </member>
        <member name="T:tdb.framework.webapi.Cache.Cacher">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Cache.Cacher._cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.Cache.Cacher.Ins">
            <summary>
            缓存实例
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Cache.Cacher.InitRedisCache(System.String[])">
            <summary>
            初始化
            </summary>
            <param name="connectionStrings">连接字符串集合</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.Cacher.InitCache(tdb.framework.webapi.Cache.ICache)">
            <summary>
            初始化
            </summary>
            <param name="cache">缓存服务</param>
        </member>
        <member name="T:tdb.framework.webapi.Cache.ICache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值
            </summary>
            <param name="key"></param>
            <param name="value">值</param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值
            </summary>
            <param name="key"></param>
            <param name="value">值</param>
            <param name="expire">过期时间</param>
            <param name="exists"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.Del(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.DelAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.Expire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key"></param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key"></param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.ExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key"></param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key"></param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.Keys(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.HGet``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.HGetAll``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.HSet(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key"></param>
            <param name="field">字段</param>
            <param name="value">值</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key"></param>
            <param name="field">字段</param>
            <param name="value">值</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.HMSet(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key"></param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.HMSetAsync(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key"></param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.HDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key"></param>
            <param name="fields"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.HDelAsync(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key"></param>
            <param name="fields"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.HExists(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.HKeys(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.HLen(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.CacheShell``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expire">过期时间</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.ICache.CacheShell``1(System.String,System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="field">字段</param>
            <param name="expire">过期时间</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="T:tdb.framework.webapi.Cache.TdbRedisCache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Cache.TdbRedisCache.rd">
            <summary>
            reids缓存
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="connectionStrings">连接字符串集合</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值
            </summary>
            <param name="key"></param>
            <param name="value">值</param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值
            </summary>
            <param name="key"></param>
            <param name="value">值</param>
            <param name="expire">过期时间</param>
            <param name="exists"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.Del(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.DelAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.Expire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key"></param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key"></param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.ExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key"></param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key"></param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.Keys(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.HGet``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.HGetAll``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.HSet(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key"></param>
            <param name="field">字段</param>
            <param name="value">值</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key"></param>
            <param name="field">字段</param>
            <param name="value">值</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.HMSet(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key"></param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.HMSetAsync(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key"></param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.HDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key"></param>
            <param name="fields"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.HDelAsync(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key"></param>
            <param name="fields"></param>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.HExists(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.HKeys(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.HLen(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.CacheShell``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expire">过期时间</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Cache.TdbRedisCache.CacheShell``1(System.String,System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="field">字段</param>
            <param name="expire">过期时间</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="T:tdb.framework.webapi.Common.HttpContextHelper">
            <summary>
            通用
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Common.HttpContextHelper.GetAttribute``1(Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            获取接口指定的特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:tdb.framework.webapi.Config.DistributedConfigExtensions">
            <summary>
            分布式配置服务
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Config.DistributedConfigExtensions.AddTdbConsulConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Int32,System.String)">
            <summary>
            添加consul分布式配置服务
            </summary>
            <param name="services"></param>
            <param name="consulIP">consul服务IP</param>
            <param name="consulPort">consul服务端口</param>
            <param name="prefixKey">key前缀，一般用来区分不同服务</param>
        </member>
        <member name="M:tdb.framework.webapi.Config.DistributedConfigExtensions.AddTdbDistributedConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{tdb.framework.webapi.Config.IDistributedConfig})">
            <summary>
            添加指定分布式配置服务
            </summary>
            <param name="services"></param>
            <param name="getService">获取服务</param>
        </member>
        <member name="T:tdb.framework.webapi.Config.DistributedConfigurator">
            <summary>
            分布式配置服务
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Config.DistributedConfigurator._config">
            <summary>
            分布式配置服务
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.Config.DistributedConfigurator.Ins">
            <summary>
            分布式配置服务
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Config.DistributedConfigurator.InitConsulConfig(System.String,System.Int32,System.String)">
            <summary>
            初始化consul分布式配置服务
            </summary>
            <param name="consulIP">consul服务IP</param>
            <param name="consulPort">consul服务端口</param>
            <param name="prefixKey">key前缀，一般用来区分不同服务</param>
        </member>
        <member name="M:tdb.framework.webapi.Config.DistributedConfigurator.InitDistributedConfig(tdb.framework.webapi.Config.IDistributedConfig)">
            <summary>
            初始化
            </summary>
            <param name="config">指定服务</param>
        </member>
        <member name="T:tdb.framework.webapi.Config.IDistributedConfig">
            <summary>
            分布式配置服务
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Config.IDistributedConfig.GetConfig``1">
            <summary>
            获取配置信息
            </summary>
            <typeparam name="T">配置信息类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Config.IDistributedConfig.BackupConfig``1(System.String)">
            <summary>
            备份配置
            </summary>
            <typeparam name="T">配置信息类型</typeparam>
            <param name="fullFileName">完整备份文件名(.json文件)</param>
            <returns>完整备份文件名</returns>
        </member>
        <member name="M:tdb.framework.webapi.Config.IDistributedConfig.RestoreConfig``1(``0)">
            <summary>
            还原配置
            </summary>
            <typeparam name="T">配置信息类型</typeparam>
            <param name="config">配置信息</param>
            <returns>还原结果</returns>
        </member>
        <member name="T:tdb.framework.webapi.Config.ILocalConfig">
            <summary>
            本地配置服务
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Config.ILocalConfig.GetConfig``1">
            <summary>
            获取本地配置信息
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:tdb.framework.webapi.Config.LocalConfigExtensions">
            <summary>
            本地配置服务
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Config.LocalConfigExtensions.AddTdbJsonConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加appsettings.json配置服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:tdb.framework.webapi.Config.LocalConfigExtensions.AddTdbLocalConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{tdb.framework.webapi.Config.ILocalConfig})">
            <summary>
            添加指定服务
            </summary>
            <param name="services"></param>
            <param name="getService">获取服务</param>
        </member>
        <member name="T:tdb.framework.webapi.Config.LocalConfigurator">
            <summary>
            本地配置服务
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Config.LocalConfigurator._config">
            <summary>
            本地配置服务
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.Config.LocalConfigurator.Ins">
            <summary>
            本地配置服务
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Config.LocalConfigurator.InitJsonConfig">
            <summary>
            初始化appsettings.json配置
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Config.LocalConfigurator.InitLocalConfig(tdb.framework.webapi.Config.ILocalConfig)">
            <summary>
            初始化
            </summary>
            <param name="config">指定服务</param>
        </member>
        <member name="T:tdb.framework.webapi.Config.TdbConsulConfig">
            <summary>
            放在consul的kv上的配置
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.Config.TdbConsulConfig._ConsulIP">
            <summary>
            consul服务IP
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.Config.TdbConsulConfig._ConsulPort">
            <summary>
            consul服务端口
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.Config.TdbConsulConfig._PrefixKey">
            <summary>
            key前缀，一般用来区分不同服务
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Config.TdbConsulConfig.#ctor(System.String,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="consulIP">consul服务IP</param>
            <param name="consulPort">consul服务端口</param>
            <param name="prefixKey">key前缀，一般用来区分不同服务</param>
        </member>
        <member name="M:tdb.framework.webapi.Config.TdbConsulConfig.GetConfig``1">
            <summary>
            获取consul上的配置信息
            </summary>
            <typeparam name="T">consul配置信息类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Config.TdbConsulConfig.BackupConfig``1(System.String)">
            <summary>
            备份配置
            </summary>
            <typeparam name="T">consul配置信息类型</typeparam>
            <param name="fullFileName">完整备份文件名(.json文件)</param>
            <returns>完整备份文件名</returns>
        </member>
        <member name="M:tdb.framework.webapi.Config.TdbConsulConfig.RestoreConfig``1(``0)">
            <summary>
            还原配置
            </summary>
            <typeparam name="T">consul配置信息类型</typeparam>
            <param name="config">配置信息</param>
            <returns>还原结果</returns>
        </member>
        <member name="T:tdb.framework.webapi.Config.TdbJsonConfig">
            <summary>
            appsettings.json配置
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Config.TdbJsonConfig.GetConfig``1">
            <summary>
            获取appsettings.json配置信息
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:tdb.framework.webapi.DTO.BaseItemRes`1">
            <summary>
            返回单条记录的结果
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.DTO.BaseItemRes`1.IsOK">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.DTO.BaseItemRes`1.MsgID">
            <summary>
            消息编码
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.DTO.BaseItemRes`1.Msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.DTO.BaseItemRes`1.Data">
            <summary>
            结果
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.DTO.BaseItemRes`1.#ctor(System.Boolean,System.String,System.String,`0)">
            <summary>
            带参构造函数
            </summary>
            <param name="isOK">是否成功</param>
            <param name="msgID">消息编码</param>
            <param name="msg">消息</param>
            <param name="data">结果</param>
        </member>
        <member name="M:tdb.framework.webapi.DTO.BaseItemRes`1.Ok(`0)">
            <summary>
            成功消息
            （IsOK=true,MsgID="OK",Msg="成功"）
            </summary>
            <param name="data">结果</param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.DTO.BaseItemRes`1.Fail(`0)">
            <summary>
            失败消息
            （IsOK=false,MsgID="Fail",Msg="失败"）
            </summary>
            <param name="data">结果</param>
            <returns></returns>
        </member>
        <member name="T:tdb.framework.webapi.DTO.BasePageRes`1">
            <summary>
            分页请求结果基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:tdb.framework.webapi.DTO.BasePageRes`1.IsOK">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.DTO.BasePageRes`1.MsgID">
            <summary>
            消息编码
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.DTO.BasePageRes`1.Msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.DTO.BasePageRes`1.Data">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.DTO.BasePageRes`1.TotalRecord">
            <summary>
            总条数
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.DTO.BasePageRes`1.#ctor(System.Boolean,System.String,System.String,System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            带参构造函数
            </summary>
            <param name="isOK">是否成功</param>
            <param name="msgID">消息编码</param>
            <param name="msg">消息</param>
            <param name="data">结果</param>
            <param name="totalRecord">总数</param>
        </member>
        <member name="M:tdb.framework.webapi.DTO.BasePageRes`1.Ok(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            成功消息
            （IsOK=true,MsgID="OK",Msg="成功"）
            </summary>
            <param name="data">结果</param>
            <param name="totalRecord">总数</param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.DTO.BasePageRes`1.Fail(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            失败消息
            （IsOK=false,MsgID="Fail",Msg="失败"）
            </summary>
            <param name="data">结果</param>
            <param name="totalRecord">总数</param>
            <returns></returns>
        </member>
        <member name="T:tdb.framework.webapi.Exceptions.GlobalExceptionExtensions">
            <summary>
            全局异常处理
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Exceptions.GlobalExceptionExtensions.AddTdbGlobalException(Microsoft.AspNetCore.Mvc.MvcOptions)">
            <summary>
            添加全局异常处理服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:tdb.framework.webapi.Exceptions.GlobalExceptionFilter">
            <summary>
            全局异常捕获过滤器
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Exceptions.GlobalExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            进行异常转码返回、并记录日志
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:tdb.framework.webapi.Exceptions.TdbException">
            <summary>
            异常
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Exceptions.TdbException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:tdb.framework.webapi.Exceptions.TdbException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:tdb.framework.webapi.Log.EnumLogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Log.EnumLogLevel.Trace">
            <summary>
            痕迹
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Log.EnumLogLevel.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Log.EnumLogLevel.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Log.EnumLogLevel.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Log.EnumLogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Log.EnumLogLevel.Fatal">
            <summary>
            致命
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Log.EnumLogLevel.Off">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:tdb.framework.webapi.Log.ILog">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Log.ILog.Log(tdb.framework.webapi.Log.EnumLogLevel,System.String)">
            <summary>
            写日志
            </summary>
            <param name="level">日志级别</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.ILog.Log(tdb.framework.webapi.Log.EnumLogLevel,System.Exception,System.String)">
            <summary>
            写日志
            </summary>
            <param name="level">日志级别</param>
            <param name="exception">异常</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.ILog.Trace(System.String)">
            <summary>
            痕迹日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.ILog.Debug(System.String)">
            <summary>
            调试日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.ILog.Info(System.String)">
            <summary>
            信息日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.ILog.Warn(System.String)">
            <summary>
            警告日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.ILog.Error(System.String)">
            <summary>
            错误日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.ILog.Error(System.Exception,System.String)">
            <summary>
            错误日志
            </summary>
            <param name="ex">异常</param>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.ILog.Fatal(System.String)">
            <summary>
            致命日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.ILog.Fatal(System.Exception,System.String)">
            <summary>
            致命日志
            </summary>
            <param name="ex">异常</param>
            <param name="msg">日志内容</param>
        </member>
        <member name="T:tdb.framework.webapi.Log.Logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Log.Logger._log">
            <summary>
            日志
            </summary>
        </member>
        <member name="P:tdb.framework.webapi.Log.Logger.Ins">
            <summary>
            日志实例
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Log.Logger.InitNLog">
            <summary>
            初始化日志
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Log.Logger.InitMySqlNLog(System.String,System.String)">
            <summary>
            初始化日志（Mysql）
            </summary>
            <param name="connectionString">MySQL数据库连接字符串</param>
            <param name="serviceCode">服务编码</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.Logger.InitLog(tdb.framework.webapi.Log.ILog)">
            <summary>
            初始化日志
            </summary>
            <param name="log">日志服务</param>
        </member>
        <member name="T:tdb.framework.webapi.Log.LoggerExtensions">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Log.LoggerExtensions.AddTdbNLogger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加日志服务（文本）
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:tdb.framework.webapi.Log.LoggerExtensions.AddTdbMySqlNLogger(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String)">
            <summary>
            添加日志服务（MySql）
            </summary>
            <param name="services"></param>
            <param name="connectionString">MySQL数据库连接字符串</param>
            <param name="serviceCode">服务编码</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.LoggerExtensions.AddTdbLogger(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{tdb.framework.webapi.Log.ILog})">
            <summary>
            添加日志服务（指定服务）
            </summary>
            <param name="services"></param>
            <param name="getLog">获取服务</param>
        </member>
        <member name="T:tdb.framework.webapi.Log.TdbNLog">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:tdb.framework.webapi.Log.TdbNLog._log">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">MySQL数据库连接字符串</param>
            <param name="serviceCode">服务编码</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.Log(tdb.framework.webapi.Log.EnumLogLevel,System.String)">
            <summary>
            写日志
            </summary>
            <param name="level">日志级别</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.Log(tdb.framework.webapi.Log.EnumLogLevel,System.Exception,System.String)">
            <summary>
            写日志
            </summary>
            <param name="level">日志级别</param>
            <param name="exception">异常</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.Trace(System.String)">
            <summary>
            痕迹日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.Debug(System.String)">
            <summary>
            调试日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.Info(System.String)">
            <summary>
            信息日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.Warn(System.String)">
            <summary>
            警告日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.Error(System.String)">
            <summary>
            错误日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.Error(System.Exception,System.String)">
            <summary>
            错误日志
            </summary>
            <param name="ex">异常</param>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.Fatal(System.String)">
            <summary>
            致命日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.Fatal(System.Exception,System.String)">
            <summary>
            致命日志
            </summary>
            <param name="ex">异常</param>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:tdb.framework.webapi.Log.TdbNLog.CvtLogLevel(tdb.framework.webapi.Log.EnumLogLevel)">
            <summary>
            日志级别转换
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:tdb.framework.webapi.Swagger.SwaggerExtensions">
            <summary>
            swagger
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Swagger.SwaggerExtensions.AddTdbSwaggerGen(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            添加Swagger服务
            </summary>
            <param name="services"></param>
            <param name="setupAction">配置</param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Swagger.SwaggerExtensions.UseTdbSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions})">
            <summary>
            添加swagger中间件
            </summary>
            <param name="app"></param>
            <param name="setupAction">配置</param>
            <returns></returns>
        </member>
        <member name="M:tdb.framework.webapi.Swagger.SwaggerExtensions.UseTdbSwaggerUI(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            添加swagger ui中间件
            </summary>
            <param name="app"></param>
            <param name="setupAction">配置</param>
            <returns></returns>
        </member>
        <member name="T:tdb.framework.webapi.Swagger.SwaggerTokenFilter">
            <summary>
            swagger 生成token输入框
            </summary>
        </member>
        <member name="M:tdb.framework.webapi.Swagger.SwaggerTokenFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
    </members>
</doc>
